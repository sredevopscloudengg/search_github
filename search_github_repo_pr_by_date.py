import json
import sys
import os
import request
from datetime import datetime

# this function reads the command lines arguments
def process_cmd_args():
  global GHUB_APP_CONFIG
  global GHUB_PR_STATES
  global GHUB_PR_DATES

  GHUB_APP_CONFIG = sys.argv[1]
  GHUB_PR_STATES = sys.argv[2]
  GHUB_PR_DATES = sys.argv[3]
  print(GHUB_APP_CONFIG)
  print(GHUB_PR_STATES)
  print(GHUB_PR_DATES)

# this function reads values from the configuration file: app.config that are used throught this program
def process_app_config():
  global ghub_api_token
  global ghub_api_search_endpoint
  global ghub_org_name
  global ghub_repo_name
  global ghub_search_start_date
  global ghub_search_end_date
  global ghub_search_results_count
  global user_email
  global app_dir
  global app_default_dir

  with open("app.config", "r") as config_file:
    app_config_data_dict = json.load(config_file)
    print(type(app_config_data_dict))
    
    ghub_api_token = app_config_data_dict['token']
    ghub_api_search_endpoint = app_config_data_dict['api_endpoint']
    ghub_org_name = app_config_data_dict['org']
    ghub_repo_name = app_config_data_dict['repo']
    ghub_search_start_date = app_config_data_dict['start_date']
    ghub_search_end_date = app_config_data_dict['end_date']
    ghub_search_results_count = app_config_data_dict['search_results_count']
    user_email = app_config_data_dict['email']
    app_dir = app_config_data_dict['dir']
    app_default_dir = app_config_data_dict['default_dir']

    print(ghub_api_token)
    print(ghub_api_search_endpoint)
    print(ghub_org_name)
    print(ghub_repo_name)
    print(ghub_search_start_date)
    print(ghub_search_end_date)
    print(ghub_search_results_count)
    print(user_email)
    print(app_dir)
    print(app_default_dir)

# this function creates temp directories to store output files generated by this program
def create_temp_dirs():
  global parent_dir
  global output_dir
  global current_date_ts
  print("app_dir")
  print(app_dir)
  parent_dir = app_dir
  print("parent_dir")
  print(parent_dir)  
  now = datetime.now() # current date and time
  current_date = now.strftime("%Y%m%d")
  print(current_date)
  current_time = now.strftime("%H%M%S")
  print(current_time)
  current_date_ts = current_date + "_" +current_time
  print(current_date_ts)
  child_dir = current_date_ts
  print(child_dir)
  new_dir = "/" + parent_dir + "/" + child_dir
  print(new_dir)
  os.mkdir(new_dir)
  if os.path.isdir(new_dir):
    output_dir = new_dir
  else:
    output_dir = app_default_dir
  print("output_dir")
  print(output_dir)

# this function creates an output file that contains consolidated output generated by this program used as an input for the mail program
def build_consolidated_output_file():
  global search_consolidated_output
  consolidated_format = "consolidated_data.txt"
  output_file = current_date_ts + "_" + consolidated_format
  print("output_file")
  print(output_file)
  search_consolidated_output = output_dir + "/" + output_file
  print("search_consolidated_output")
  print(search_consolidated_output)

# this function creates multiple temporary output files used by the search function to write output
def build_output_file(state, date_type, format_type):
  ghub_pr_state = state
  ghub_pr_date_type = date_type
  file_format = format_type
  output_file = current_date_ts + "_" + ghub_pr_state + "_" + ghub_pr_date_type + "_" + file_format
  print("output_file")
  print(output_file)

# this function builds a search string used by the GitHub Search API using the values defined in the app.config file
def build_search_string(state, date_type):
  ghub_pr_state = state
  ghub_pr_date_type = date_type
  #ghub_search_string = "repo:ghub_org_name/ghub_repo_name+is:pr+state:$ghub_pr_state+$ghub_pr_date_type:$ghub_search_start_date..$ghub_search_end_date"
  ghub_search_string =  "repo:" + ghub_org_name + "/" + ghub_repo_name + "+is:pr+state:" + ghub_pr_state + "+" + ghub_pr_date_type + ":" + ghub_search_start_date + ".." + ghub_search_end_date
  return ghub_search_string

# this function executes search using the GitHub search api
def run_search(state, date_type):
  ghub_pr_state = state
  ghub_pr_date_type = date_type
  ghub_search_string = build_search_string(ghub_pr_state, ghub_pr_date_type)
  print("ghub_search_string")
  print(ghub_search_string)
  
  #raw csv output
  raw_format = "raw_data.csv"
  search_raw_output = output_dir + "/" + build_output_file(ghub_pr_state, ghub_pr_date_type, raw_format)
  curl -s -H "Authorization: token $ghub_api_token" "https://$ghub_api_search_endpoint?q=$ghub_search_string&per_page=$ghub_search_results_count" | jq -r '.items[] | "\(.number),\(.html_url),\(.url)"' > "$search_raw_output"
   

def main():
  print("Hello World!")
  process_cmd_args()
  process_app_config()
  create_temp_dirs()
  build_consolidated_output_file()
  #build_output_file("open", "created", "raw_data.csv")
  #print(build_search_string("open", "created"))

if __name__ == "__main__":
  main()

